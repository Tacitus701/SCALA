[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\arnau\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\arnau\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_292)
[debug]       Load.loadUnit: plugins took 74.455ms
[debug]       Load.loadUnit: defsScala took 0.267599ms
[debug] [Loading] Scanning directory C:\Users\arnau\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arnau\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.083399 ms
[debug]           Load.resolveProject(global-plugins) took 40.132999ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\arnau\.sbt\1.0\plugins, plugins: List(<none>))) took 78.831901ms
[debug] [Loading] Done in C:\Users\arnau\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 94.4034ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.330799ms
[debug]     Load.loadUnit(file:/C:/Users/arnau/.sbt/1.0/plugins/, ...) took 175.5849ms
[debug]   Load.apply: load took 324.5104ms
[debug]   Load.apply: resolveProjects took 6.015701ms
[debug]   Load.apply: finalTransforms took 43.7536ms
[debug]   Load.apply: config.delegates took 6.468599ms
[debug]   Load.apply: Def.make(settings)... took 276.131501ms
[debug]   Load.apply: structureIndex took 73.0022ms
[debug]   Load.apply: mkStreams took 1.2539ms
[info] loading global plugins from C:\Users\arnau\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1900.747699ms
[debug]           Load.loadUnit: plugins took 31.1372ms
[debug]           Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project
[debug]             Load.loadUnit: mkEval took 5.943799ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3492 ms
[info] loading settings for project peaceland-build from idea1.sbt ...
[debug]               Load.resolveProject(peaceland-build) took 2.7203ms
[debug]             Load.loadTransitive: finalizeProject(Project(id peaceland-build, base: C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project, plugins: List(<none>))) took 4.576301ms
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project, returning: (peaceland-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 116.5551ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.541399ms
[debug]         Load.loadUnit(file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/project/, ...) took 156.1302ms
[debug]       Load.apply: load took 157.798601ms
[debug]       Load.apply: resolveProjects took 0.096801ms
[debug]       Load.apply: finalTransforms took 5.7527ms
[debug]       Load.apply: config.delegates took 0.333899ms
[debug]       Load.apply: Def.make(settings)... took 54.603599ms
[debug]       Load.apply: structureIndex took 18.7147ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 456.4774ms
[debug]     Load.loadUnit: defsScala took 0.002199ms
[debug] [Loading] Scanning directory C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland
[debug]       Load.loadUnit: mkEval took 0.345099ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.171299 ms
[info] loading settings for project peaceland from build.sbt ...
[debug]         Load.resolveProject(peaceland) took 20.878499ms
[debug]       Load.loadTransitive: finalizeProject(Project(id peaceland, base: C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland, plugins: List(<none>))) took 23.9175ms
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland, returning: (peaceland)
[debug]     Load.loadUnit: loadedProjectsRaw took 1490.9643ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.1248ms
[debug]   Load.loadUnit(file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/, ...) took 1957.0966ms
[debug] Load.apply: load took 1959.1048ms
[debug] Load.apply: resolveProjects took 0.0878ms
[debug] Load.apply: finalTransforms took 15.836499ms
[debug] Load.apply: config.delegates took 0.233001ms
[debug] Load.apply: Def.make(settings)... took 47.959801ms
[debug] Load.apply: structureIndex took 12.8158ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to Peaceland (in build file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62914 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62914, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Peaceland (in build file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/)
[debug] > Exec(idea-shell, None, None)
