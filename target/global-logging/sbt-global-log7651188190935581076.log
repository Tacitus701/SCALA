[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\arnau\AppData\Local\Temp\idea8.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\arnau\AppData\Local\Temp\idea8.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_292)
[debug]       Load.loadUnit: plugins took 168.5017ms
[debug]       Load.loadUnit: defsScala took 0.3072ms
[debug] [Loading] Scanning directory C:\Users\arnau\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arnau\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.1065 ms
[debug]           Load.resolveProject(global-plugins) took 41.7554ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\arnau\.sbt\1.0\plugins, plugins: List(<none>))) took 85.8558ms
[debug] [Loading] Done in C:\Users\arnau\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 103.9694ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3397ms
[debug]     Load.loadUnit(file:/C:/Users/arnau/.sbt/1.0/plugins/, ...) took 280.4653ms
[debug]   Load.apply: load took 412.3537ms
[debug]   Load.apply: resolveProjects took 4.8315ms
[debug]   Load.apply: finalTransforms took 42.4488ms
[debug]   Load.apply: config.delegates took 5.6088ms
[debug]   Load.apply: Def.make(settings)... took 261.8474ms
[debug]   Load.apply: structureIndex took 73.7889ms
[debug]   Load.apply: mkStreams took 1.1406ms
[info] loading global plugins from C:\Users\arnau\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1889.8362ms
[debug]           Load.loadUnit: plugins took 29.3571ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project
[debug]             Load.loadUnit: mkEval took 6.2069ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8229 ms
[info] loading settings for project peaceland-build from idea8.sbt ...
[debug]               Load.resolveProject(peaceland-build) took 2.9352ms
[debug]             Load.loadTransitive: finalizeProject(Project(id peaceland-build, base: C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project, plugins: List(<none>))) took 5.1689ms
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project, returning: (peaceland-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 141.5392ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.9335ms
[debug]         Load.loadUnit(file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/project/, ...) took 179.1768ms
[debug]       Load.apply: load took 180.5267ms
[debug]       Load.apply: resolveProjects took 0.084ms
[debug]       Load.apply: finalTransforms took 6.7827ms
[debug]       Load.apply: config.delegates took 0.3229ms
[debug]       Load.apply: Def.make(settings)... took 61.872ms
[debug]       Load.apply: structureIndex took 24.9283ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 500.0599ms
[debug]     Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland
[debug]       Load.loadUnit: mkEval took 0.3137ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7195 ms
[info] loading settings for project peaceland from build.sbt ...
[debug]         Load.resolveProject(peaceland) took 20.2417ms
[debug]       Load.loadTransitive: finalizeProject(Project(id peaceland, base: C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland, plugins: List(<none>))) took 22.7579ms
[debug] [Loading] Done in C:\Users\arnau\OneDrive - EPITA\COURS\SCALA\Peaceland, returning: (peaceland)
[debug]     Load.loadUnit: loadedProjectsRaw took 1355.3682ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.6214ms
[debug]   Load.loadUnit(file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/, ...) took 1864.5455ms
[debug] Load.apply: load took 1866.1947ms
[debug] Load.apply: resolveProjects took 0.0862ms
[debug] Load.apply: finalTransforms took 18.018ms
[debug] Load.apply: config.delegates took 0.2901ms
[debug] Load.apply: Def.make(settings)... took 148.6539ms
[debug] Load.apply: structureIndex took 18.3376ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to Peaceland (in build file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62914 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62914, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Peaceland (in build file:/C:/Users/arnau/OneDrive%20-%20EPITA/COURS/SCALA/Peaceland/)
[debug] > Exec(idea-shell, None, None)
